name: Test Workflow

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction --no-root

    - name: Run unit tests
      run: |
        poetry run python -m pytest tests/unit/ -v --tb=short

    - name: Run integration tests
      run: |
        poetry run python -m pytest tests/integration/ -v --tb=short

    - name: Run performance tests
      run: |
        poetry run python -m pytest tests/performance/ -v --tb=short -m performance

    - name: Run end-to-end tests
      run: |
        poetry run python -m pytest tests/e2e/ -v --tb=short

    - name: Run all tests with coverage
      run: |
        poetry run python -m pytest tests/ --cov=app/models --cov-report=xml --cov-report=term --cov-report=html -v

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archive coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  quality-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Check code formatting with black (if available)
      continue-on-error: true
      run: |
        if poetry show black &> /dev/null; then
          poetry run black --check .
        else
          echo "Black not installed, skipping format check"
        fi

    - name: Run linting with ruff (if available)
      continue-on-error: true
      run: |
        if poetry show ruff &> /dev/null; then
          poetry run ruff check .
        else
          echo "Ruff not installed, skipping linting"
        fi

    - name: Run type checking with mypy (if available)
      continue-on-error: true
      run: |
        if poetry show mypy &> /dev/null; then
          poetry run mypy app/ || echo "MyPy check completed with warnings"
        else
          echo "MyPy not installed, skipping type checking"
        fi

  test-runner-validation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Test our custom test runner
      run: |
        python run_tests.py unit
        python run_tests.py integration
        python run_tests.py performance
        python run_tests.py e2e
        python run_tests.py all

    - name: Validate coverage command
      run: |
        python run_tests.py coverage
