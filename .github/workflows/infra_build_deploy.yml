# Pipeline CD: Deployment em Produção

# Este workflow executa APENAS na branch main após merge de PR validada.
# Provisiona infraestrutura EC2, faz build/push Docker e deploy em produção.

# **Pré-requisitos:**
# 1. CI deve ter passado na branch develop
# 2. PR deve ter sido aprovada e merged em main
# 3. Secrets AWS, Docker Hub e SSH devem estar configuradas
# ---
name: CD - Production Deploy

on:
    push:
        branches: [main]

jobs:
    infra:
        name: Provisionar EC2 com Terraform
        runs-on: ubuntu-latest
        outputs:
            ec2_ip: ${{ steps.get_ip.outputs.ec2_ip }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3

            - name: Terraform Init & Apply
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  TF_VAR_region: ${{ secrets.AWS_REGION }}
                  TF_VAR_key_name: "acompanhamento-key"
                  TF_VAR_public_key_path: "/tmp/acompanhamento-key.pub"
                  TF_VAR_my_ip: "${{ secrets.MY_IP }}/32"
                  TF_VAR_instance_type: "t2.micro"
                  TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
                  TF_VAR_dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
                  TF_VAR_db_user: ${{ secrets.DB_USER }}
                  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
                  TF_VAR_rds_host: ${{ secrets.RDS_HOST }}
                  TF_VAR_db_name: ${{ secrets.DB_NAME }}
              run: |
                  # Criar chave SSH pública a partir da privada
                  echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/acompanhamento-key
                  chmod 600 /tmp/acompanhamento-key
                  ssh-keygen -y -f /tmp/acompanhamento-key > /tmp/acompanhamento-key.pub

                  # Executar Terraform
                  cd infra-ec2
                  terraform init
                  terraform apply -auto-approve

            - name: Get EC2 Public IP
              id: get_ip
              run: |
                  cd infra-ec2
                  echo "ec2_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT

    build-and-push:
        name: Build e Push Docker
        needs: infra
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: ${{ secrets.DOCKERHUB_USERNAME }}/acompanhamento:latest

    deploy:
        name: Deploy na EC2
        needs: [infra, build-and-push]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3

            - name: Get Runner Public IP
              id: runner_ip
              run: |
                  RUNNER_IP=$(curl -s https://ifconfig.me)
                  echo "runner_ip=$RUNNER_IP" >> $GITHUB_OUTPUT
                  echo "Runner IP: $RUNNER_IP"

            - name: Add Runner IP to Security Group
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
              run: |
                  # Obter o security group ID da instância EC2
                  cd infra-ec2
                  terraform init
                  SG_ID=$(terraform output -raw security_group_id)

                  # Adicionar regra temporária para SSH do runner
                  aws ec2 authorize-security-group-ingress \
                    --group-id $SG_ID \
                    --protocol tcp \
                    --port 22 \
                    --cidr ${{ steps.runner_ip.outputs.runner_ip }}/32 \
                    --tag-specifications 'ResourceType=security-group-rule,Tags=[{Key=Name,Value=github-runner-temp},{Key=Temporary,Value=true}]' \
                    || echo "Regra já existe ou erro ao adicionar"

            - name: Wait for EC2 to be ready
              run: sleep 30 # Aguarda EC2 completar user_data setup

            - name: Deploy on EC2 via SSH
              uses: appleboy/ssh-action@v1
              with:
                  host: ${{ needs.infra.outputs.ec2_ip }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.EC2_SSH_KEY }}
                  script: |
                      # Aguardar Docker estar disponível (instalado via user_data)
                      while ! command -v docker &> /dev/null; do
                          echo "Aguardando Docker estar disponível..."
                          sleep 5
                      done

                      # Parar container anterior se existir
                      docker stop acompanhamento 2>/dev/null || true
                      docker rm acompanhamento 2>/dev/null || true

                      # Fazer pull da nova imagem
                      docker pull ${{ secrets.DOCKERHUB_USERNAME }}/acompanhamento:latest

                      # Executar novo container
                      docker run -d \
                        --name acompanhamento \
                        -p 8000:8000 \
                        -e DATABASE_URL="sqlite:///./acompanhamento.db" \
                        -e ENVIRONMENT="production" \
                        ${{ secrets.DOCKERHUB_USERNAME }}/acompanhamento:latest

            - name: Remove Runner IP from Security Group
              if: always() # Executa mesmo se o deploy falhar
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
              run: |
                  # Obter o security group ID
                  cd infra-ec2
                  terraform init
                  SG_ID=$(terraform output -raw security_group_id)

                  # Remover a regra temporária do runner
                  aws ec2 revoke-security-group-ingress \
                    --group-id $SG_ID \
                    --protocol tcp \
                    --port 22 \
                    --cidr ${{ steps.runner_ip.outputs.runner_ip }}/32 \
                    || echo "Regra não encontrada ou já removida"

                  echo "IP do runner removido do security group com sucesso"
