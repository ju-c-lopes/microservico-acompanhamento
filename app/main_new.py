"""
Nova aplica√ß√£o FastAPI com estrutura completa para o microservi√ßo de acompanhamento.
Esta vers√£o substituir√° gradualmente o main.py atual, mantendo compatibilidade total.

Caracter√≠sticas:
- Estrutura de rotas /acompanhamento/...
- Exception handling robusto
- Middleware CORS configurado
- Health checks para monitoramento
- Documenta√ß√£o autom√°tica (Swagger)
"""

from contextlib import asynccontextmanager
from datetime import datetime

from fastapi import FastAPI, Request
from fastapi.exceptions import RequestValidationError
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from starlette.exceptions import HTTPException as StarletteHTTPException

from app.api.v1.acompanhamento import router as acompanhamento_router


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gerencia o ciclo de vida da aplica√ß√£o (startup e shutdown).
    Substitui os decoradores @app.on_event que foram deprecated.
    """
    # Startup
    print("üöÄ Microservi√ßo de Acompanhamento iniciado")
    print("üìã Endpoints dispon√≠veis:")
    print("   - GET  /acompanhamento/health")
    print("   - GET  /acompanhamento/{id_pedido}")
    print("   - PUT  /acompanhamento/{id_pedido}/status")
    print("   - GET  /acompanhamento/fila/pedidos")
    print("   - GET  /acompanhamento/cliente/{cpf}")
    print("üìñ Documenta√ß√£o: http://localhost:8000/docs")

    yield  # Aplica√ß√£o roda aqui

    # Shutdown
    print("üõë Microservi√ßo de Acompanhamento finalizando...")


# Criar aplica√ß√£o FastAPI com lifespan
app = FastAPI(
    title="Microservi√ßo de Acompanhamento",
    description="""
    API para acompanhamento de pedidos da lanchonete.
    
    Este microservi√ßo √© respons√°vel por:
    - Acompanhar o progresso dos pedidos
    - Gerenciar status de pedidos (Recebido ‚Üí Em Prepara√ß√£o ‚Üí Pronto ‚Üí Finalizado)
    - Fornecer fila de pedidos para a cozinha
    - Manter hist√≥rico de pedidos por cliente
    
    Comunica√ß√£o via eventos Kafka com outros microservi√ßos:
    - Microservi√ßo de Pedidos (recebe eventos de cria√ß√£o)
    - Microservi√ßo de Pagamento (recebe eventos de pagamento)
    """,
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    lifespan=lifespan,
)

# Middleware CORS para permitir acesso de diferentes origens
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar origens espec√≠ficas
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)


# Exception handlers para tratamento centralizado de erros
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """
    Handler para erros de valida√ß√£o de entrada (dados inv√°lidos).
    Retorna resposta padronizada com detalhes do erro.
    """
    return JSONResponse(
        status_code=422,
        content={
            "detail": "Dados de entrada inv√°lidos",
            "errors": exc.errors(),
            "body": exc.body,
        },
    )


@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(request: Request, exc: StarletteHTTPException):
    """
    Handler para exce√ß√µes HTTP gerais.
    Mant√©m o c√≥digo de status original e formata a resposta.
    """
    return JSONResponse(
        status_code=exc.status_code,
        content={"detail": exc.detail, "status_code": exc.status_code},
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """
    Handler para exce√ß√µes n√£o tratadas.
    Evita que erros internos vazem informa√ß√µes sens√≠veis.
    """
    return JSONResponse(
        status_code=500,
        content={
            "detail": "Erro interno do servidor",
            "error_type": type(exc).__name__,
        },
    )


# Incluir as rotas do acompanhamento
app.include_router(acompanhamento_router)


# Rota raiz do microservi√ßo
@app.get("/")
async def root():
    """
    Endpoint raiz do microservi√ßo.
    Fornece informa√ß√µes b√°sicas sobre o servi√ßo e links √∫teis.
    """
    return {
        "message": "Microservi√ßo de Acompanhamento",
        "description": "API para acompanhamento de pedidos da lanchonete",
        "version": "1.0.0",
        "timestamp": datetime.now().isoformat(),
        "documentation": {
            "swagger": "/docs",
            "redoc": "/redoc",
            "openapi": "/openapi.json",
        },
        "endpoints": {
            "health": "/acompanhamento/health",
            "buscar_pedido": "/acompanhamento/{id_pedido}",
            "atualizar_status": "/acompanhamento/{id_pedido}/status",
            "fila_cozinha": "/acompanhamento/fila/pedidos",
            "historico_cliente": "/acompanhamento/cliente/{cpf}",
        },
    }


# Health check global (al√©m do espec√≠fico do acompanhamento)
@app.get("/health")
async def health_check_global():
    """
    Health check global do microservi√ßo.
    Usado por load balancers e ferramentas de monitoramento.
    """
    return {
        "status": "healthy",
        "service": "microservico-acompanhamento",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0",
        "components": {
            "database": "healthy",  # Aqui poderia ter verifica√ß√£o real do DB
            "api": "healthy",
        },
    }


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        reload=True,  # Apenas para desenvolvimento
        log_level="info",
    )
